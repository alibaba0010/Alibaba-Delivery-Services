generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Users
}

model Avatars {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String
  url       String
  user      Users   @relation(fields: [userId], references: [id])
  userId    String @unique @db.ObjectId
}

model Users {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  // phone_number Float? @unique  ===> we can't use this line because sometime our phone number is null and then we can't compare it
  phone_number Float?
  address      String?
  password     String
  avatar       Avatars?
  reviews      Reviews[]
  role         Role      @default(Users)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  // orders       Oerders[]

  @@unique([email, phone_number], name: "unique_email_phone_number") // In this approach, a composite unique constraint (@@unique) is created on both email and phone_number. This allows phone_number to be null but enforces uniqueness when phone_number is not null.
}

model Reviews {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  review String
  rating Float
  userId String @db.ObjectId
  user   Users   @relation(fields: [userId], references: [id])
  meal   Meals  @relation(fields: [mealId], references: [id])
  mealId String @db.ObjectId
}

model Images {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  public_id String
  url       String
  mealId    String @db.ObjectId
  meal      Meals  @relation(fields: [mealId], references: [id])
}
model Meals {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  price          Int
  estimatedPrice Int?
  category       String
  images         Images[]
  restaurantId   String     @db.ObjectId
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Reviews        Reviews[]
  // orders       Oerders[]

}

model Restaurant {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  country      String
  city         String
  address      String
  email        String   @unique
  phone_number Float    @unique
  password     String
  Meals        Meals[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
model Orders{
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  // user         Users     @relation(fields: [userId], references: [id])
  mealId       String   @db.ObjectId
  // meal         Meals    @relation(fields: [mealId], references: [id])
  restaurantId String @db.ObjectId
  quantity     Int
  amount     Int
  totalAmount        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
